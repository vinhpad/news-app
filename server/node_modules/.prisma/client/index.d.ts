
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Category
 * 
 */
export type Category = {
  idCategory: number
  nameCategory: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Favourite
 * 
 */
export type Favourite = {
  idFavourite: number
  idUser: number
  idNewspaper: number
  cteatedAt: Date
  updatedAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  idUser: number
  email: string
  username: string
  password: string
  profile_photo_path: string | null
  cteatedAt: Date
  updatedAt: Date
}

/**
 * Model Newspaper
 * 
 */
export type Newspaper = {
  idNewspaper: number
  title: string | null
  description: string | null
  image: string | null
  content: string | null
  writer: string | null
  nameCategory: string
  date: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.favourite`: Exposes CRUD operations for the **Favourite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favourites
    * const favourites = await prisma.favourite.findMany()
    * ```
    */
  get favourite(): Prisma.FavouriteDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.newspaper`: Exposes CRUD operations for the **Newspaper** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newspapers
    * const newspapers = await prisma.newspaper.findMany()
    * ```
    */
  get newspaper(): Prisma.NewspaperDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Category: 'Category',
    Favourite: 'Favourite',
    User: 'User',
    Newspaper: 'Newspaper'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    Newspaper: number
  }

  export type CategoryCountOutputTypeSelect = {
    Newspaper?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    favourites: number
  }

  export type UserCountOutputTypeSelect = {
    favourites?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type NewspaperCountOutputType
   */


  export type NewspaperCountOutputType = {
    Favourite: number
  }

  export type NewspaperCountOutputTypeSelect = {
    Favourite?: boolean
  }

  export type NewspaperCountOutputTypeGetPayload<S extends boolean | null | undefined | NewspaperCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? NewspaperCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (NewspaperCountOutputTypeArgs)
    ? NewspaperCountOutputType 
    : S extends { select: any } & (NewspaperCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof NewspaperCountOutputType ? NewspaperCountOutputType[P] : never
  } 
      : NewspaperCountOutputType




  // Custom InputTypes

  /**
   * NewspaperCountOutputType without action
   */
  export type NewspaperCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NewspaperCountOutputType
     */
    select?: NewspaperCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    idCategory: number | null
  }

  export type CategorySumAggregateOutputType = {
    idCategory: number | null
  }

  export type CategoryMinAggregateOutputType = {
    idCategory: number | null
    nameCategory: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    idCategory: number | null
    nameCategory: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    idCategory: number
    nameCategory: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    idCategory?: true
  }

  export type CategorySumAggregateInputType = {
    idCategory?: true
  }

  export type CategoryMinAggregateInputType = {
    idCategory?: true
    nameCategory?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    idCategory?: true
    nameCategory?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    idCategory?: true
    nameCategory?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: CategoryScalarFieldEnum[]
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    idCategory: number
    nameCategory: string
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    idCategory?: boolean
    nameCategory?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Newspaper?: boolean | Category$NewspaperArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    Newspaper?: boolean | Category$NewspaperArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Newspaper' ? Array < NewspaperGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Newspaper' ? Array < NewspaperGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `idCategory`
     * const categoryWithIdCategoryOnly = await prisma.category.findMany({ select: { idCategory: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Newspaper<T extends Category$NewspaperArgs= {}>(args?: Subset<T, Category$NewspaperArgs>): Prisma.PrismaPromise<Array<NewspaperGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     */
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.Newspaper
   */
  export type Category$NewspaperArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    where?: NewspaperWhereInput
    orderBy?: Enumerable<NewspaperOrderByWithRelationInput>
    cursor?: NewspaperWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NewspaperScalarFieldEnum>
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
  }



  /**
   * Model Favourite
   */


  export type AggregateFavourite = {
    _count: FavouriteCountAggregateOutputType | null
    _avg: FavouriteAvgAggregateOutputType | null
    _sum: FavouriteSumAggregateOutputType | null
    _min: FavouriteMinAggregateOutputType | null
    _max: FavouriteMaxAggregateOutputType | null
  }

  export type FavouriteAvgAggregateOutputType = {
    idFavourite: number | null
    idUser: number | null
    idNewspaper: number | null
  }

  export type FavouriteSumAggregateOutputType = {
    idFavourite: number | null
    idUser: number | null
    idNewspaper: number | null
  }

  export type FavouriteMinAggregateOutputType = {
    idFavourite: number | null
    idUser: number | null
    idNewspaper: number | null
    cteatedAt: Date | null
    updatedAt: Date | null
  }

  export type FavouriteMaxAggregateOutputType = {
    idFavourite: number | null
    idUser: number | null
    idNewspaper: number | null
    cteatedAt: Date | null
    updatedAt: Date | null
  }

  export type FavouriteCountAggregateOutputType = {
    idFavourite: number
    idUser: number
    idNewspaper: number
    cteatedAt: number
    updatedAt: number
    _all: number
  }


  export type FavouriteAvgAggregateInputType = {
    idFavourite?: true
    idUser?: true
    idNewspaper?: true
  }

  export type FavouriteSumAggregateInputType = {
    idFavourite?: true
    idUser?: true
    idNewspaper?: true
  }

  export type FavouriteMinAggregateInputType = {
    idFavourite?: true
    idUser?: true
    idNewspaper?: true
    cteatedAt?: true
    updatedAt?: true
  }

  export type FavouriteMaxAggregateInputType = {
    idFavourite?: true
    idUser?: true
    idNewspaper?: true
    cteatedAt?: true
    updatedAt?: true
  }

  export type FavouriteCountAggregateInputType = {
    idFavourite?: true
    idUser?: true
    idNewspaper?: true
    cteatedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FavouriteAggregateArgs = {
    /**
     * Filter which Favourite to aggregate.
     */
    where?: FavouriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavouriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favourites
    **/
    _count?: true | FavouriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavouriteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavouriteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavouriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavouriteMaxAggregateInputType
  }

  export type GetFavouriteAggregateType<T extends FavouriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavourite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavourite[P]>
      : GetScalarType<T[P], AggregateFavourite[P]>
  }




  export type FavouriteGroupByArgs = {
    where?: FavouriteWhereInput
    orderBy?: Enumerable<FavouriteOrderByWithAggregationInput>
    by: FavouriteScalarFieldEnum[]
    having?: FavouriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavouriteCountAggregateInputType | true
    _avg?: FavouriteAvgAggregateInputType
    _sum?: FavouriteSumAggregateInputType
    _min?: FavouriteMinAggregateInputType
    _max?: FavouriteMaxAggregateInputType
  }


  export type FavouriteGroupByOutputType = {
    idFavourite: number
    idUser: number
    idNewspaper: number
    cteatedAt: Date
    updatedAt: Date
    _count: FavouriteCountAggregateOutputType | null
    _avg: FavouriteAvgAggregateOutputType | null
    _sum: FavouriteSumAggregateOutputType | null
    _min: FavouriteMinAggregateOutputType | null
    _max: FavouriteMaxAggregateOutputType | null
  }

  type GetFavouriteGroupByPayload<T extends FavouriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FavouriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavouriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavouriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavouriteGroupByOutputType[P]>
        }
      >
    >


  export type FavouriteSelect = {
    idFavourite?: boolean
    idUser?: boolean
    idNewspaper?: boolean
    cteatedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
    newspaper?: boolean | NewspaperArgs
  }


  export type FavouriteInclude = {
    user?: boolean | UserArgs
    newspaper?: boolean | NewspaperArgs
  }

  export type FavouriteGetPayload<S extends boolean | null | undefined | FavouriteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Favourite :
    S extends undefined ? never :
    S extends { include: any } & (FavouriteArgs | FavouriteFindManyArgs)
    ? Favourite  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'newspaper' ? NewspaperGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FavouriteArgs | FavouriteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'newspaper' ? NewspaperGetPayload<S['select'][P]> :  P extends keyof Favourite ? Favourite[P] : never
  } 
      : Favourite


  type FavouriteCountArgs = 
    Omit<FavouriteFindManyArgs, 'select' | 'include'> & {
      select?: FavouriteCountAggregateInputType | true
    }

  export interface FavouriteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Favourite that matches the filter.
     * @param {FavouriteFindUniqueArgs} args - Arguments to find a Favourite
     * @example
     * // Get one Favourite
     * const favourite = await prisma.favourite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavouriteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FavouriteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Favourite'> extends True ? Prisma__FavouriteClient<FavouriteGetPayload<T>> : Prisma__FavouriteClient<FavouriteGetPayload<T> | null, null>

    /**
     * Find one Favourite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavouriteFindUniqueOrThrowArgs} args - Arguments to find a Favourite
     * @example
     * // Get one Favourite
     * const favourite = await prisma.favourite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavouriteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FavouriteFindUniqueOrThrowArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Find the first Favourite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteFindFirstArgs} args - Arguments to find a Favourite
     * @example
     * // Get one Favourite
     * const favourite = await prisma.favourite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavouriteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FavouriteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Favourite'> extends True ? Prisma__FavouriteClient<FavouriteGetPayload<T>> : Prisma__FavouriteClient<FavouriteGetPayload<T> | null, null>

    /**
     * Find the first Favourite that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteFindFirstOrThrowArgs} args - Arguments to find a Favourite
     * @example
     * // Get one Favourite
     * const favourite = await prisma.favourite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavouriteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FavouriteFindFirstOrThrowArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Find zero or more Favourites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favourites
     * const favourites = await prisma.favourite.findMany()
     * 
     * // Get first 10 Favourites
     * const favourites = await prisma.favourite.findMany({ take: 10 })
     * 
     * // Only select the `idFavourite`
     * const favouriteWithIdFavouriteOnly = await prisma.favourite.findMany({ select: { idFavourite: true } })
     * 
    **/
    findMany<T extends FavouriteFindManyArgs>(
      args?: SelectSubset<T, FavouriteFindManyArgs>
    ): Prisma.PrismaPromise<Array<FavouriteGetPayload<T>>>

    /**
     * Create a Favourite.
     * @param {FavouriteCreateArgs} args - Arguments to create a Favourite.
     * @example
     * // Create one Favourite
     * const Favourite = await prisma.favourite.create({
     *   data: {
     *     // ... data to create a Favourite
     *   }
     * })
     * 
    **/
    create<T extends FavouriteCreateArgs>(
      args: SelectSubset<T, FavouriteCreateArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Create many Favourites.
     *     @param {FavouriteCreateManyArgs} args - Arguments to create many Favourites.
     *     @example
     *     // Create many Favourites
     *     const favourite = await prisma.favourite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavouriteCreateManyArgs>(
      args?: SelectSubset<T, FavouriteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Favourite.
     * @param {FavouriteDeleteArgs} args - Arguments to delete one Favourite.
     * @example
     * // Delete one Favourite
     * const Favourite = await prisma.favourite.delete({
     *   where: {
     *     // ... filter to delete one Favourite
     *   }
     * })
     * 
    **/
    delete<T extends FavouriteDeleteArgs>(
      args: SelectSubset<T, FavouriteDeleteArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Update one Favourite.
     * @param {FavouriteUpdateArgs} args - Arguments to update one Favourite.
     * @example
     * // Update one Favourite
     * const favourite = await prisma.favourite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavouriteUpdateArgs>(
      args: SelectSubset<T, FavouriteUpdateArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Delete zero or more Favourites.
     * @param {FavouriteDeleteManyArgs} args - Arguments to filter Favourites to delete.
     * @example
     * // Delete a few Favourites
     * const { count } = await prisma.favourite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavouriteDeleteManyArgs>(
      args?: SelectSubset<T, FavouriteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favourites
     * const favourite = await prisma.favourite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavouriteUpdateManyArgs>(
      args: SelectSubset<T, FavouriteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favourite.
     * @param {FavouriteUpsertArgs} args - Arguments to update or create a Favourite.
     * @example
     * // Update or create a Favourite
     * const favourite = await prisma.favourite.upsert({
     *   create: {
     *     // ... data to create a Favourite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favourite we want to update
     *   }
     * })
    **/
    upsert<T extends FavouriteUpsertArgs>(
      args: SelectSubset<T, FavouriteUpsertArgs>
    ): Prisma__FavouriteClient<FavouriteGetPayload<T>>

    /**
     * Count the number of Favourites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCountArgs} args - Arguments to filter Favourites to count.
     * @example
     * // Count the number of Favourites
     * const count = await prisma.favourite.count({
     *   where: {
     *     // ... the filter for the Favourites we want to count
     *   }
     * })
    **/
    count<T extends FavouriteCountArgs>(
      args?: Subset<T, FavouriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavouriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favourite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavouriteAggregateArgs>(args: Subset<T, FavouriteAggregateArgs>): Prisma.PrismaPromise<GetFavouriteAggregateType<T>>

    /**
     * Group by Favourite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavouriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavouriteGroupByArgs['orderBy'] }
        : { orderBy?: FavouriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavouriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavouriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Favourite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FavouriteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    newspaper<T extends NewspaperArgs= {}>(args?: Subset<T, NewspaperArgs>): Prisma__NewspaperClient<NewspaperGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Favourite base type for findUnique actions
   */
  export type FavouriteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter, which Favourite to fetch.
     */
    where: FavouriteWhereUniqueInput
  }

  /**
   * Favourite findUnique
   */
  export interface FavouriteFindUniqueArgs extends FavouriteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Favourite findUniqueOrThrow
   */
  export type FavouriteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter, which Favourite to fetch.
     */
    where: FavouriteWhereUniqueInput
  }


  /**
   * Favourite base type for findFirst actions
   */
  export type FavouriteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter, which Favourite to fetch.
     */
    where?: FavouriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favourites.
     */
    cursor?: FavouriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favourites.
     */
    distinct?: Enumerable<FavouriteScalarFieldEnum>
  }

  /**
   * Favourite findFirst
   */
  export interface FavouriteFindFirstArgs extends FavouriteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Favourite findFirstOrThrow
   */
  export type FavouriteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter, which Favourite to fetch.
     */
    where?: FavouriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favourites.
     */
    cursor?: FavouriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favourites.
     */
    distinct?: Enumerable<FavouriteScalarFieldEnum>
  }


  /**
   * Favourite findMany
   */
  export type FavouriteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter, which Favourites to fetch.
     */
    where?: FavouriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favourites to fetch.
     */
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favourites.
     */
    cursor?: FavouriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favourites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favourites.
     */
    skip?: number
    distinct?: Enumerable<FavouriteScalarFieldEnum>
  }


  /**
   * Favourite create
   */
  export type FavouriteCreateArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * The data needed to create a Favourite.
     */
    data: XOR<FavouriteCreateInput, FavouriteUncheckedCreateInput>
  }


  /**
   * Favourite createMany
   */
  export type FavouriteCreateManyArgs = {
    /**
     * The data used to create many Favourites.
     */
    data: Enumerable<FavouriteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Favourite update
   */
  export type FavouriteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * The data needed to update a Favourite.
     */
    data: XOR<FavouriteUpdateInput, FavouriteUncheckedUpdateInput>
    /**
     * Choose, which Favourite to update.
     */
    where: FavouriteWhereUniqueInput
  }


  /**
   * Favourite updateMany
   */
  export type FavouriteUpdateManyArgs = {
    /**
     * The data used to update Favourites.
     */
    data: XOR<FavouriteUpdateManyMutationInput, FavouriteUncheckedUpdateManyInput>
    /**
     * Filter which Favourites to update
     */
    where?: FavouriteWhereInput
  }


  /**
   * Favourite upsert
   */
  export type FavouriteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * The filter to search for the Favourite to update in case it exists.
     */
    where: FavouriteWhereUniqueInput
    /**
     * In case the Favourite found by the `where` argument doesn't exist, create a new Favourite with this data.
     */
    create: XOR<FavouriteCreateInput, FavouriteUncheckedCreateInput>
    /**
     * In case the Favourite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavouriteUpdateInput, FavouriteUncheckedUpdateInput>
  }


  /**
   * Favourite delete
   */
  export type FavouriteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    /**
     * Filter which Favourite to delete.
     */
    where: FavouriteWhereUniqueInput
  }


  /**
   * Favourite deleteMany
   */
  export type FavouriteDeleteManyArgs = {
    /**
     * Filter which Favourites to delete
     */
    where?: FavouriteWhereInput
  }


  /**
   * Favourite without action
   */
  export type FavouriteArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    idUser: number | null
  }

  export type UserSumAggregateOutputType = {
    idUser: number | null
  }

  export type UserMinAggregateOutputType = {
    idUser: number | null
    email: string | null
    username: string | null
    password: string | null
    profile_photo_path: string | null
    cteatedAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    idUser: number | null
    email: string | null
    username: string | null
    password: string | null
    profile_photo_path: string | null
    cteatedAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    idUser: number
    email: number
    username: number
    password: number
    profile_photo_path: number
    cteatedAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    idUser?: true
  }

  export type UserSumAggregateInputType = {
    idUser?: true
  }

  export type UserMinAggregateInputType = {
    idUser?: true
    email?: true
    username?: true
    password?: true
    profile_photo_path?: true
    cteatedAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    idUser?: true
    email?: true
    username?: true
    password?: true
    profile_photo_path?: true
    cteatedAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    idUser?: true
    email?: true
    username?: true
    password?: true
    profile_photo_path?: true
    cteatedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    idUser: number
    email: string
    username: string
    password: string
    profile_photo_path: string | null
    cteatedAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    idUser?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    profile_photo_path?: boolean
    cteatedAt?: boolean
    updatedAt?: boolean
    favourites?: boolean | User$favouritesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    favourites?: boolean | User$favouritesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'favourites' ? Array < FavouriteGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'favourites' ? Array < FavouriteGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userWithIdUserOnly = await prisma.user.findMany({ select: { idUser: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    favourites<T extends User$favouritesArgs= {}>(args?: Subset<T, User$favouritesArgs>): Prisma.PrismaPromise<Array<FavouriteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.favourites
   */
  export type User$favouritesArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    where?: FavouriteWhereInput
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    cursor?: FavouriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FavouriteScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Newspaper
   */


  export type AggregateNewspaper = {
    _count: NewspaperCountAggregateOutputType | null
    _avg: NewspaperAvgAggregateOutputType | null
    _sum: NewspaperSumAggregateOutputType | null
    _min: NewspaperMinAggregateOutputType | null
    _max: NewspaperMaxAggregateOutputType | null
  }

  export type NewspaperAvgAggregateOutputType = {
    idNewspaper: number | null
  }

  export type NewspaperSumAggregateOutputType = {
    idNewspaper: number | null
  }

  export type NewspaperMinAggregateOutputType = {
    idNewspaper: number | null
    title: string | null
    description: string | null
    image: string | null
    content: string | null
    writer: string | null
    nameCategory: string | null
    date: Date | null
    updatedAt: Date | null
  }

  export type NewspaperMaxAggregateOutputType = {
    idNewspaper: number | null
    title: string | null
    description: string | null
    image: string | null
    content: string | null
    writer: string | null
    nameCategory: string | null
    date: Date | null
    updatedAt: Date | null
  }

  export type NewspaperCountAggregateOutputType = {
    idNewspaper: number
    title: number
    description: number
    image: number
    content: number
    writer: number
    nameCategory: number
    date: number
    updatedAt: number
    _all: number
  }


  export type NewspaperAvgAggregateInputType = {
    idNewspaper?: true
  }

  export type NewspaperSumAggregateInputType = {
    idNewspaper?: true
  }

  export type NewspaperMinAggregateInputType = {
    idNewspaper?: true
    title?: true
    description?: true
    image?: true
    content?: true
    writer?: true
    nameCategory?: true
    date?: true
    updatedAt?: true
  }

  export type NewspaperMaxAggregateInputType = {
    idNewspaper?: true
    title?: true
    description?: true
    image?: true
    content?: true
    writer?: true
    nameCategory?: true
    date?: true
    updatedAt?: true
  }

  export type NewspaperCountAggregateInputType = {
    idNewspaper?: true
    title?: true
    description?: true
    image?: true
    content?: true
    writer?: true
    nameCategory?: true
    date?: true
    updatedAt?: true
    _all?: true
  }

  export type NewspaperAggregateArgs = {
    /**
     * Filter which Newspaper to aggregate.
     */
    where?: NewspaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newspapers to fetch.
     */
    orderBy?: Enumerable<NewspaperOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewspaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newspapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newspapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Newspapers
    **/
    _count?: true | NewspaperCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewspaperAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewspaperSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewspaperMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewspaperMaxAggregateInputType
  }

  export type GetNewspaperAggregateType<T extends NewspaperAggregateArgs> = {
        [P in keyof T & keyof AggregateNewspaper]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewspaper[P]>
      : GetScalarType<T[P], AggregateNewspaper[P]>
  }




  export type NewspaperGroupByArgs = {
    where?: NewspaperWhereInput
    orderBy?: Enumerable<NewspaperOrderByWithAggregationInput>
    by: NewspaperScalarFieldEnum[]
    having?: NewspaperScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewspaperCountAggregateInputType | true
    _avg?: NewspaperAvgAggregateInputType
    _sum?: NewspaperSumAggregateInputType
    _min?: NewspaperMinAggregateInputType
    _max?: NewspaperMaxAggregateInputType
  }


  export type NewspaperGroupByOutputType = {
    idNewspaper: number
    title: string | null
    description: string | null
    image: string | null
    content: string | null
    writer: string | null
    nameCategory: string
    date: Date
    updatedAt: Date
    _count: NewspaperCountAggregateOutputType | null
    _avg: NewspaperAvgAggregateOutputType | null
    _sum: NewspaperSumAggregateOutputType | null
    _min: NewspaperMinAggregateOutputType | null
    _max: NewspaperMaxAggregateOutputType | null
  }

  type GetNewspaperGroupByPayload<T extends NewspaperGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NewspaperGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewspaperGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewspaperGroupByOutputType[P]>
            : GetScalarType<T[P], NewspaperGroupByOutputType[P]>
        }
      >
    >


  export type NewspaperSelect = {
    idNewspaper?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    content?: boolean
    writer?: boolean
    nameCategory?: boolean
    date?: boolean
    updatedAt?: boolean
    category?: boolean | CategoryArgs
    Favourite?: boolean | Newspaper$FavouriteArgs
    _count?: boolean | NewspaperCountOutputTypeArgs
  }


  export type NewspaperInclude = {
    category?: boolean | CategoryArgs
    Favourite?: boolean | Newspaper$FavouriteArgs
    _count?: boolean | NewspaperCountOutputTypeArgs
  }

  export type NewspaperGetPayload<S extends boolean | null | undefined | NewspaperArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Newspaper :
    S extends undefined ? never :
    S extends { include: any } & (NewspaperArgs | NewspaperFindManyArgs)
    ? Newspaper  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? CategoryGetPayload<S['include'][P]> :
        P extends 'Favourite' ? Array < FavouriteGetPayload<S['include'][P]>>  :
        P extends '_count' ? NewspaperCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NewspaperArgs | NewspaperFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? CategoryGetPayload<S['select'][P]> :
        P extends 'Favourite' ? Array < FavouriteGetPayload<S['select'][P]>>  :
        P extends '_count' ? NewspaperCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Newspaper ? Newspaper[P] : never
  } 
      : Newspaper


  type NewspaperCountArgs = 
    Omit<NewspaperFindManyArgs, 'select' | 'include'> & {
      select?: NewspaperCountAggregateInputType | true
    }

  export interface NewspaperDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Newspaper that matches the filter.
     * @param {NewspaperFindUniqueArgs} args - Arguments to find a Newspaper
     * @example
     * // Get one Newspaper
     * const newspaper = await prisma.newspaper.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewspaperFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewspaperFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Newspaper'> extends True ? Prisma__NewspaperClient<NewspaperGetPayload<T>> : Prisma__NewspaperClient<NewspaperGetPayload<T> | null, null>

    /**
     * Find one Newspaper that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NewspaperFindUniqueOrThrowArgs} args - Arguments to find a Newspaper
     * @example
     * // Get one Newspaper
     * const newspaper = await prisma.newspaper.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewspaperFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NewspaperFindUniqueOrThrowArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Find the first Newspaper that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperFindFirstArgs} args - Arguments to find a Newspaper
     * @example
     * // Get one Newspaper
     * const newspaper = await prisma.newspaper.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewspaperFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewspaperFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Newspaper'> extends True ? Prisma__NewspaperClient<NewspaperGetPayload<T>> : Prisma__NewspaperClient<NewspaperGetPayload<T> | null, null>

    /**
     * Find the first Newspaper that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperFindFirstOrThrowArgs} args - Arguments to find a Newspaper
     * @example
     * // Get one Newspaper
     * const newspaper = await prisma.newspaper.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewspaperFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NewspaperFindFirstOrThrowArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Find zero or more Newspapers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newspapers
     * const newspapers = await prisma.newspaper.findMany()
     * 
     * // Get first 10 Newspapers
     * const newspapers = await prisma.newspaper.findMany({ take: 10 })
     * 
     * // Only select the `idNewspaper`
     * const newspaperWithIdNewspaperOnly = await prisma.newspaper.findMany({ select: { idNewspaper: true } })
     * 
    **/
    findMany<T extends NewspaperFindManyArgs>(
      args?: SelectSubset<T, NewspaperFindManyArgs>
    ): Prisma.PrismaPromise<Array<NewspaperGetPayload<T>>>

    /**
     * Create a Newspaper.
     * @param {NewspaperCreateArgs} args - Arguments to create a Newspaper.
     * @example
     * // Create one Newspaper
     * const Newspaper = await prisma.newspaper.create({
     *   data: {
     *     // ... data to create a Newspaper
     *   }
     * })
     * 
    **/
    create<T extends NewspaperCreateArgs>(
      args: SelectSubset<T, NewspaperCreateArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Create many Newspapers.
     *     @param {NewspaperCreateManyArgs} args - Arguments to create many Newspapers.
     *     @example
     *     // Create many Newspapers
     *     const newspaper = await prisma.newspaper.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewspaperCreateManyArgs>(
      args?: SelectSubset<T, NewspaperCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Newspaper.
     * @param {NewspaperDeleteArgs} args - Arguments to delete one Newspaper.
     * @example
     * // Delete one Newspaper
     * const Newspaper = await prisma.newspaper.delete({
     *   where: {
     *     // ... filter to delete one Newspaper
     *   }
     * })
     * 
    **/
    delete<T extends NewspaperDeleteArgs>(
      args: SelectSubset<T, NewspaperDeleteArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Update one Newspaper.
     * @param {NewspaperUpdateArgs} args - Arguments to update one Newspaper.
     * @example
     * // Update one Newspaper
     * const newspaper = await prisma.newspaper.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewspaperUpdateArgs>(
      args: SelectSubset<T, NewspaperUpdateArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Delete zero or more Newspapers.
     * @param {NewspaperDeleteManyArgs} args - Arguments to filter Newspapers to delete.
     * @example
     * // Delete a few Newspapers
     * const { count } = await prisma.newspaper.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewspaperDeleteManyArgs>(
      args?: SelectSubset<T, NewspaperDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newspapers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newspapers
     * const newspaper = await prisma.newspaper.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewspaperUpdateManyArgs>(
      args: SelectSubset<T, NewspaperUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Newspaper.
     * @param {NewspaperUpsertArgs} args - Arguments to update or create a Newspaper.
     * @example
     * // Update or create a Newspaper
     * const newspaper = await prisma.newspaper.upsert({
     *   create: {
     *     // ... data to create a Newspaper
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newspaper we want to update
     *   }
     * })
    **/
    upsert<T extends NewspaperUpsertArgs>(
      args: SelectSubset<T, NewspaperUpsertArgs>
    ): Prisma__NewspaperClient<NewspaperGetPayload<T>>

    /**
     * Count the number of Newspapers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperCountArgs} args - Arguments to filter Newspapers to count.
     * @example
     * // Count the number of Newspapers
     * const count = await prisma.newspaper.count({
     *   where: {
     *     // ... the filter for the Newspapers we want to count
     *   }
     * })
    **/
    count<T extends NewspaperCountArgs>(
      args?: Subset<T, NewspaperCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewspaperCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newspaper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewspaperAggregateArgs>(args: Subset<T, NewspaperAggregateArgs>): Prisma.PrismaPromise<GetNewspaperAggregateType<T>>

    /**
     * Group by Newspaper.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewspaperGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewspaperGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewspaperGroupByArgs['orderBy'] }
        : { orderBy?: NewspaperGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewspaperGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewspaperGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Newspaper.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewspaperClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    Favourite<T extends Newspaper$FavouriteArgs= {}>(args?: Subset<T, Newspaper$FavouriteArgs>): Prisma.PrismaPromise<Array<FavouriteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Newspaper base type for findUnique actions
   */
  export type NewspaperFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter, which Newspaper to fetch.
     */
    where: NewspaperWhereUniqueInput
  }

  /**
   * Newspaper findUnique
   */
  export interface NewspaperFindUniqueArgs extends NewspaperFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Newspaper findUniqueOrThrow
   */
  export type NewspaperFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter, which Newspaper to fetch.
     */
    where: NewspaperWhereUniqueInput
  }


  /**
   * Newspaper base type for findFirst actions
   */
  export type NewspaperFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter, which Newspaper to fetch.
     */
    where?: NewspaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newspapers to fetch.
     */
    orderBy?: Enumerable<NewspaperOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newspapers.
     */
    cursor?: NewspaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newspapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newspapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newspapers.
     */
    distinct?: Enumerable<NewspaperScalarFieldEnum>
  }

  /**
   * Newspaper findFirst
   */
  export interface NewspaperFindFirstArgs extends NewspaperFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Newspaper findFirstOrThrow
   */
  export type NewspaperFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter, which Newspaper to fetch.
     */
    where?: NewspaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newspapers to fetch.
     */
    orderBy?: Enumerable<NewspaperOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newspapers.
     */
    cursor?: NewspaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newspapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newspapers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newspapers.
     */
    distinct?: Enumerable<NewspaperScalarFieldEnum>
  }


  /**
   * Newspaper findMany
   */
  export type NewspaperFindManyArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter, which Newspapers to fetch.
     */
    where?: NewspaperWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newspapers to fetch.
     */
    orderBy?: Enumerable<NewspaperOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Newspapers.
     */
    cursor?: NewspaperWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newspapers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newspapers.
     */
    skip?: number
    distinct?: Enumerable<NewspaperScalarFieldEnum>
  }


  /**
   * Newspaper create
   */
  export type NewspaperCreateArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * The data needed to create a Newspaper.
     */
    data: XOR<NewspaperCreateInput, NewspaperUncheckedCreateInput>
  }


  /**
   * Newspaper createMany
   */
  export type NewspaperCreateManyArgs = {
    /**
     * The data used to create many Newspapers.
     */
    data: Enumerable<NewspaperCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Newspaper update
   */
  export type NewspaperUpdateArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * The data needed to update a Newspaper.
     */
    data: XOR<NewspaperUpdateInput, NewspaperUncheckedUpdateInput>
    /**
     * Choose, which Newspaper to update.
     */
    where: NewspaperWhereUniqueInput
  }


  /**
   * Newspaper updateMany
   */
  export type NewspaperUpdateManyArgs = {
    /**
     * The data used to update Newspapers.
     */
    data: XOR<NewspaperUpdateManyMutationInput, NewspaperUncheckedUpdateManyInput>
    /**
     * Filter which Newspapers to update
     */
    where?: NewspaperWhereInput
  }


  /**
   * Newspaper upsert
   */
  export type NewspaperUpsertArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * The filter to search for the Newspaper to update in case it exists.
     */
    where: NewspaperWhereUniqueInput
    /**
     * In case the Newspaper found by the `where` argument doesn't exist, create a new Newspaper with this data.
     */
    create: XOR<NewspaperCreateInput, NewspaperUncheckedCreateInput>
    /**
     * In case the Newspaper was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewspaperUpdateInput, NewspaperUncheckedUpdateInput>
  }


  /**
   * Newspaper delete
   */
  export type NewspaperDeleteArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
    /**
     * Filter which Newspaper to delete.
     */
    where: NewspaperWhereUniqueInput
  }


  /**
   * Newspaper deleteMany
   */
  export type NewspaperDeleteManyArgs = {
    /**
     * Filter which Newspapers to delete
     */
    where?: NewspaperWhereInput
  }


  /**
   * Newspaper.Favourite
   */
  export type Newspaper$FavouriteArgs = {
    /**
     * Select specific fields to fetch from the Favourite
     */
    select?: FavouriteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavouriteInclude | null
    where?: FavouriteWhereInput
    orderBy?: Enumerable<FavouriteOrderByWithRelationInput>
    cursor?: FavouriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FavouriteScalarFieldEnum>
  }


  /**
   * Newspaper without action
   */
  export type NewspaperArgs = {
    /**
     * Select specific fields to fetch from the Newspaper
     */
    select?: NewspaperSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewspaperInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    idCategory: 'idCategory',
    nameCategory: 'nameCategory',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const FavouriteScalarFieldEnum: {
    idFavourite: 'idFavourite',
    idUser: 'idUser',
    idNewspaper: 'idNewspaper',
    cteatedAt: 'cteatedAt',
    updatedAt: 'updatedAt'
  };

  export type FavouriteScalarFieldEnum = (typeof FavouriteScalarFieldEnum)[keyof typeof FavouriteScalarFieldEnum]


  export const NewspaperScalarFieldEnum: {
    idNewspaper: 'idNewspaper',
    title: 'title',
    description: 'description',
    image: 'image',
    content: 'content',
    writer: 'writer',
    nameCategory: 'nameCategory',
    date: 'date',
    updatedAt: 'updatedAt'
  };

  export type NewspaperScalarFieldEnum = (typeof NewspaperScalarFieldEnum)[keyof typeof NewspaperScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    idUser: 'idUser',
    email: 'email',
    username: 'username',
    password: 'password',
    profile_photo_path: 'profile_photo_path',
    cteatedAt: 'cteatedAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    idCategory?: IntFilter | number
    nameCategory?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Newspaper?: NewspaperListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    idCategory?: SortOrder
    nameCategory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Newspaper?: NewspaperOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    idCategory?: number
    nameCategory?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    idCategory?: SortOrder
    nameCategory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    idCategory?: IntWithAggregatesFilter | number
    nameCategory?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FavouriteWhereInput = {
    AND?: Enumerable<FavouriteWhereInput>
    OR?: Enumerable<FavouriteWhereInput>
    NOT?: Enumerable<FavouriteWhereInput>
    idFavourite?: IntFilter | number
    idUser?: IntFilter | number
    idNewspaper?: IntFilter | number
    cteatedAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    newspaper?: XOR<NewspaperRelationFilter, NewspaperWhereInput>
  }

  export type FavouriteOrderByWithRelationInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    newspaper?: NewspaperOrderByWithRelationInput
  }

  export type FavouriteWhereUniqueInput = {
    idFavourite?: number
    idUser_idNewspaper?: FavouriteIdUserIdNewspaperCompoundUniqueInput
  }

  export type FavouriteOrderByWithAggregationInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FavouriteCountOrderByAggregateInput
    _avg?: FavouriteAvgOrderByAggregateInput
    _max?: FavouriteMaxOrderByAggregateInput
    _min?: FavouriteMinOrderByAggregateInput
    _sum?: FavouriteSumOrderByAggregateInput
  }

  export type FavouriteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FavouriteScalarWhereWithAggregatesInput>
    OR?: Enumerable<FavouriteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FavouriteScalarWhereWithAggregatesInput>
    idFavourite?: IntWithAggregatesFilter | number
    idUser?: IntWithAggregatesFilter | number
    idNewspaper?: IntWithAggregatesFilter | number
    cteatedAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    idUser?: IntFilter | number
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    profile_photo_path?: StringNullableFilter | string | null
    cteatedAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    favourites?: FavouriteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    idUser?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile_photo_path?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
    favourites?: FavouriteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    idUser?: number
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    idUser?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile_photo_path?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    idUser?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    profile_photo_path?: StringNullableWithAggregatesFilter | string | null
    cteatedAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NewspaperWhereInput = {
    AND?: Enumerable<NewspaperWhereInput>
    OR?: Enumerable<NewspaperWhereInput>
    NOT?: Enumerable<NewspaperWhereInput>
    idNewspaper?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    writer?: StringNullableFilter | string | null
    nameCategory?: StringFilter | string
    date?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    Favourite?: FavouriteListRelationFilter
  }

  export type NewspaperOrderByWithRelationInput = {
    idNewspaper?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    content?: SortOrder
    writer?: SortOrder
    nameCategory?: SortOrder
    date?: SortOrder
    updatedAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    Favourite?: FavouriteOrderByRelationAggregateInput
  }

  export type NewspaperWhereUniqueInput = {
    idNewspaper?: number
    title?: string
  }

  export type NewspaperOrderByWithAggregationInput = {
    idNewspaper?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    content?: SortOrder
    writer?: SortOrder
    nameCategory?: SortOrder
    date?: SortOrder
    updatedAt?: SortOrder
    _count?: NewspaperCountOrderByAggregateInput
    _avg?: NewspaperAvgOrderByAggregateInput
    _max?: NewspaperMaxOrderByAggregateInput
    _min?: NewspaperMinOrderByAggregateInput
    _sum?: NewspaperSumOrderByAggregateInput
  }

  export type NewspaperScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewspaperScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewspaperScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewspaperScalarWhereWithAggregatesInput>
    idNewspaper?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    content?: StringNullableWithAggregatesFilter | string | null
    writer?: StringNullableWithAggregatesFilter | string | null
    nameCategory?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CategoryCreateInput = {
    nameCategory: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Newspaper?: NewspaperCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    idCategory?: number
    nameCategory: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Newspaper?: NewspaperUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Newspaper?: NewspaperUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Newspaper?: NewspaperUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    idCategory?: number
    nameCategory: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteCreateInput = {
    cteatedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFavouritesInput
    newspaper: NewspaperCreateNestedOneWithoutFavouriteInput
  }

  export type FavouriteUncheckedCreateInput = {
    idFavourite?: number
    idUser: number
    idNewspaper: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteUpdateInput = {
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavouritesNestedInput
    newspaper?: NewspaperUpdateOneRequiredWithoutFavouriteNestedInput
  }

  export type FavouriteUncheckedUpdateInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idNewspaper?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteCreateManyInput = {
    idFavourite?: number
    idUser: number
    idNewspaper: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteUpdateManyMutationInput = {
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteUncheckedUpdateManyInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idNewspaper?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    username: string
    password: string
    profile_photo_path?: string | null
    cteatedAt?: Date | string
    updatedAt?: Date | string
    favourites?: FavouriteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    idUser?: number
    email: string
    username: string
    password: string
    profile_photo_path?: string | null
    cteatedAt?: Date | string
    updatedAt?: Date | string
    favourites?: FavouriteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favourites?: FavouriteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favourites?: FavouriteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    idUser?: number
    email: string
    username: string
    password: string
    profile_photo_path?: string | null
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewspaperCreateInput = {
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    date?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutNewspaperInput
    Favourite?: FavouriteCreateNestedManyWithoutNewspaperInput
  }

  export type NewspaperUncheckedCreateInput = {
    idNewspaper?: number
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    nameCategory: string
    date?: Date | string
    updatedAt?: Date | string
    Favourite?: FavouriteUncheckedCreateNestedManyWithoutNewspaperInput
  }

  export type NewspaperUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutNewspaperNestedInput
    Favourite?: FavouriteUpdateManyWithoutNewspaperNestedInput
  }

  export type NewspaperUncheckedUpdateInput = {
    idNewspaper?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    nameCategory?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Favourite?: FavouriteUncheckedUpdateManyWithoutNewspaperNestedInput
  }

  export type NewspaperCreateManyInput = {
    idNewspaper?: number
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    nameCategory: string
    date?: Date | string
    updatedAt?: Date | string
  }

  export type NewspaperUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewspaperUncheckedUpdateManyInput = {
    idNewspaper?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    nameCategory?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NewspaperListRelationFilter = {
    every?: NewspaperWhereInput
    some?: NewspaperWhereInput
    none?: NewspaperWhereInput
  }

  export type NewspaperOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    idCategory?: SortOrder
    nameCategory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    idCategory?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    idCategory?: SortOrder
    nameCategory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    idCategory?: SortOrder
    nameCategory?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    idCategory?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type NewspaperRelationFilter = {
    is?: NewspaperWhereInput
    isNot?: NewspaperWhereInput
  }

  export type FavouriteIdUserIdNewspaperCompoundUniqueInput = {
    idUser: number
    idNewspaper: number
  }

  export type FavouriteCountOrderByAggregateInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavouriteAvgOrderByAggregateInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
  }

  export type FavouriteMaxOrderByAggregateInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavouriteMinOrderByAggregateInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavouriteSumOrderByAggregateInput = {
    idFavourite?: SortOrder
    idUser?: SortOrder
    idNewspaper?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type FavouriteListRelationFilter = {
    every?: FavouriteWhereInput
    some?: FavouriteWhereInput
    none?: FavouriteWhereInput
  }

  export type FavouriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    idUser?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile_photo_path?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    idUser?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile_photo_path?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    idUser?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile_photo_path?: SortOrder
    cteatedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type NewspaperCountOrderByAggregateInput = {
    idNewspaper?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    content?: SortOrder
    writer?: SortOrder
    nameCategory?: SortOrder
    date?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewspaperAvgOrderByAggregateInput = {
    idNewspaper?: SortOrder
  }

  export type NewspaperMaxOrderByAggregateInput = {
    idNewspaper?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    content?: SortOrder
    writer?: SortOrder
    nameCategory?: SortOrder
    date?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewspaperMinOrderByAggregateInput = {
    idNewspaper?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    content?: SortOrder
    writer?: SortOrder
    nameCategory?: SortOrder
    date?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewspaperSumOrderByAggregateInput = {
    idNewspaper?: SortOrder
  }

  export type NewspaperCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<NewspaperCreateWithoutCategoryInput>, Enumerable<NewspaperUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<NewspaperCreateOrConnectWithoutCategoryInput>
    createMany?: NewspaperCreateManyCategoryInputEnvelope
    connect?: Enumerable<NewspaperWhereUniqueInput>
  }

  export type NewspaperUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<NewspaperCreateWithoutCategoryInput>, Enumerable<NewspaperUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<NewspaperCreateOrConnectWithoutCategoryInput>
    createMany?: NewspaperCreateManyCategoryInputEnvelope
    connect?: Enumerable<NewspaperWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NewspaperUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<NewspaperCreateWithoutCategoryInput>, Enumerable<NewspaperUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<NewspaperCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<NewspaperUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: NewspaperCreateManyCategoryInputEnvelope
    set?: Enumerable<NewspaperWhereUniqueInput>
    disconnect?: Enumerable<NewspaperWhereUniqueInput>
    delete?: Enumerable<NewspaperWhereUniqueInput>
    connect?: Enumerable<NewspaperWhereUniqueInput>
    update?: Enumerable<NewspaperUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<NewspaperUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<NewspaperScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NewspaperUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<NewspaperCreateWithoutCategoryInput>, Enumerable<NewspaperUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<NewspaperCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<NewspaperUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: NewspaperCreateManyCategoryInputEnvelope
    set?: Enumerable<NewspaperWhereUniqueInput>
    disconnect?: Enumerable<NewspaperWhereUniqueInput>
    delete?: Enumerable<NewspaperWhereUniqueInput>
    connect?: Enumerable<NewspaperWhereUniqueInput>
    update?: Enumerable<NewspaperUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<NewspaperUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<NewspaperScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFavouritesInput = {
    create?: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouritesInput
    connect?: UserWhereUniqueInput
  }

  export type NewspaperCreateNestedOneWithoutFavouriteInput = {
    create?: XOR<NewspaperCreateWithoutFavouriteInput, NewspaperUncheckedCreateWithoutFavouriteInput>
    connectOrCreate?: NewspaperCreateOrConnectWithoutFavouriteInput
    connect?: NewspaperWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavouritesNestedInput = {
    create?: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouritesInput
    upsert?: UserUpsertWithoutFavouritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFavouritesInput, UserUncheckedUpdateWithoutFavouritesInput>
  }

  export type NewspaperUpdateOneRequiredWithoutFavouriteNestedInput = {
    create?: XOR<NewspaperCreateWithoutFavouriteInput, NewspaperUncheckedCreateWithoutFavouriteInput>
    connectOrCreate?: NewspaperCreateOrConnectWithoutFavouriteInput
    upsert?: NewspaperUpsertWithoutFavouriteInput
    connect?: NewspaperWhereUniqueInput
    update?: XOR<NewspaperUpdateWithoutFavouriteInput, NewspaperUncheckedUpdateWithoutFavouriteInput>
  }

  export type FavouriteCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutUserInput>, Enumerable<FavouriteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutUserInput>
    createMany?: FavouriteCreateManyUserInputEnvelope
    connect?: Enumerable<FavouriteWhereUniqueInput>
  }

  export type FavouriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutUserInput>, Enumerable<FavouriteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutUserInput>
    createMany?: FavouriteCreateManyUserInputEnvelope
    connect?: Enumerable<FavouriteWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FavouriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutUserInput>, Enumerable<FavouriteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FavouriteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FavouriteCreateManyUserInputEnvelope
    set?: Enumerable<FavouriteWhereUniqueInput>
    disconnect?: Enumerable<FavouriteWhereUniqueInput>
    delete?: Enumerable<FavouriteWhereUniqueInput>
    connect?: Enumerable<FavouriteWhereUniqueInput>
    update?: Enumerable<FavouriteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FavouriteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FavouriteScalarWhereInput>
  }

  export type FavouriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutUserInput>, Enumerable<FavouriteUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FavouriteUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FavouriteCreateManyUserInputEnvelope
    set?: Enumerable<FavouriteWhereUniqueInput>
    disconnect?: Enumerable<FavouriteWhereUniqueInput>
    delete?: Enumerable<FavouriteWhereUniqueInput>
    connect?: Enumerable<FavouriteWhereUniqueInput>
    update?: Enumerable<FavouriteUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FavouriteUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FavouriteScalarWhereInput>
  }

  export type CategoryCreateNestedOneWithoutNewspaperInput = {
    create?: XOR<CategoryCreateWithoutNewspaperInput, CategoryUncheckedCreateWithoutNewspaperInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutNewspaperInput
    connect?: CategoryWhereUniqueInput
  }

  export type FavouriteCreateNestedManyWithoutNewspaperInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutNewspaperInput>, Enumerable<FavouriteUncheckedCreateWithoutNewspaperInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutNewspaperInput>
    createMany?: FavouriteCreateManyNewspaperInputEnvelope
    connect?: Enumerable<FavouriteWhereUniqueInput>
  }

  export type FavouriteUncheckedCreateNestedManyWithoutNewspaperInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutNewspaperInput>, Enumerable<FavouriteUncheckedCreateWithoutNewspaperInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutNewspaperInput>
    createMany?: FavouriteCreateManyNewspaperInputEnvelope
    connect?: Enumerable<FavouriteWhereUniqueInput>
  }

  export type CategoryUpdateOneRequiredWithoutNewspaperNestedInput = {
    create?: XOR<CategoryCreateWithoutNewspaperInput, CategoryUncheckedCreateWithoutNewspaperInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutNewspaperInput
    upsert?: CategoryUpsertWithoutNewspaperInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutNewspaperInput, CategoryUncheckedUpdateWithoutNewspaperInput>
  }

  export type FavouriteUpdateManyWithoutNewspaperNestedInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutNewspaperInput>, Enumerable<FavouriteUncheckedCreateWithoutNewspaperInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutNewspaperInput>
    upsert?: Enumerable<FavouriteUpsertWithWhereUniqueWithoutNewspaperInput>
    createMany?: FavouriteCreateManyNewspaperInputEnvelope
    set?: Enumerable<FavouriteWhereUniqueInput>
    disconnect?: Enumerable<FavouriteWhereUniqueInput>
    delete?: Enumerable<FavouriteWhereUniqueInput>
    connect?: Enumerable<FavouriteWhereUniqueInput>
    update?: Enumerable<FavouriteUpdateWithWhereUniqueWithoutNewspaperInput>
    updateMany?: Enumerable<FavouriteUpdateManyWithWhereWithoutNewspaperInput>
    deleteMany?: Enumerable<FavouriteScalarWhereInput>
  }

  export type FavouriteUncheckedUpdateManyWithoutNewspaperNestedInput = {
    create?: XOR<Enumerable<FavouriteCreateWithoutNewspaperInput>, Enumerable<FavouriteUncheckedCreateWithoutNewspaperInput>>
    connectOrCreate?: Enumerable<FavouriteCreateOrConnectWithoutNewspaperInput>
    upsert?: Enumerable<FavouriteUpsertWithWhereUniqueWithoutNewspaperInput>
    createMany?: FavouriteCreateManyNewspaperInputEnvelope
    set?: Enumerable<FavouriteWhereUniqueInput>
    disconnect?: Enumerable<FavouriteWhereUniqueInput>
    delete?: Enumerable<FavouriteWhereUniqueInput>
    connect?: Enumerable<FavouriteWhereUniqueInput>
    update?: Enumerable<FavouriteUpdateWithWhereUniqueWithoutNewspaperInput>
    updateMany?: Enumerable<FavouriteUpdateManyWithWhereWithoutNewspaperInput>
    deleteMany?: Enumerable<FavouriteScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NewspaperCreateWithoutCategoryInput = {
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    date?: Date | string
    updatedAt?: Date | string
    Favourite?: FavouriteCreateNestedManyWithoutNewspaperInput
  }

  export type NewspaperUncheckedCreateWithoutCategoryInput = {
    idNewspaper?: number
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    date?: Date | string
    updatedAt?: Date | string
    Favourite?: FavouriteUncheckedCreateNestedManyWithoutNewspaperInput
  }

  export type NewspaperCreateOrConnectWithoutCategoryInput = {
    where: NewspaperWhereUniqueInput
    create: XOR<NewspaperCreateWithoutCategoryInput, NewspaperUncheckedCreateWithoutCategoryInput>
  }

  export type NewspaperCreateManyCategoryInputEnvelope = {
    data: Enumerable<NewspaperCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type NewspaperUpsertWithWhereUniqueWithoutCategoryInput = {
    where: NewspaperWhereUniqueInput
    update: XOR<NewspaperUpdateWithoutCategoryInput, NewspaperUncheckedUpdateWithoutCategoryInput>
    create: XOR<NewspaperCreateWithoutCategoryInput, NewspaperUncheckedCreateWithoutCategoryInput>
  }

  export type NewspaperUpdateWithWhereUniqueWithoutCategoryInput = {
    where: NewspaperWhereUniqueInput
    data: XOR<NewspaperUpdateWithoutCategoryInput, NewspaperUncheckedUpdateWithoutCategoryInput>
  }

  export type NewspaperUpdateManyWithWhereWithoutCategoryInput = {
    where: NewspaperScalarWhereInput
    data: XOR<NewspaperUpdateManyMutationInput, NewspaperUncheckedUpdateManyWithoutNewspaperInput>
  }

  export type NewspaperScalarWhereInput = {
    AND?: Enumerable<NewspaperScalarWhereInput>
    OR?: Enumerable<NewspaperScalarWhereInput>
    NOT?: Enumerable<NewspaperScalarWhereInput>
    idNewspaper?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    writer?: StringNullableFilter | string | null
    nameCategory?: StringFilter | string
    date?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutFavouritesInput = {
    email: string
    username: string
    password: string
    profile_photo_path?: string | null
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutFavouritesInput = {
    idUser?: number
    email: string
    username: string
    password: string
    profile_photo_path?: string | null
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutFavouritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
  }

  export type NewspaperCreateWithoutFavouriteInput = {
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    date?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutNewspaperInput
  }

  export type NewspaperUncheckedCreateWithoutFavouriteInput = {
    idNewspaper?: number
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    nameCategory: string
    date?: Date | string
    updatedAt?: Date | string
  }

  export type NewspaperCreateOrConnectWithoutFavouriteInput = {
    where: NewspaperWhereUniqueInput
    create: XOR<NewspaperCreateWithoutFavouriteInput, NewspaperUncheckedCreateWithoutFavouriteInput>
  }

  export type UserUpsertWithoutFavouritesInput = {
    update: XOR<UserUpdateWithoutFavouritesInput, UserUncheckedUpdateWithoutFavouritesInput>
    create: XOR<UserCreateWithoutFavouritesInput, UserUncheckedCreateWithoutFavouritesInput>
  }

  export type UserUpdateWithoutFavouritesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutFavouritesInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_photo_path?: NullableStringFieldUpdateOperationsInput | string | null
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewspaperUpsertWithoutFavouriteInput = {
    update: XOR<NewspaperUpdateWithoutFavouriteInput, NewspaperUncheckedUpdateWithoutFavouriteInput>
    create: XOR<NewspaperCreateWithoutFavouriteInput, NewspaperUncheckedCreateWithoutFavouriteInput>
  }

  export type NewspaperUpdateWithoutFavouriteInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutNewspaperNestedInput
  }

  export type NewspaperUncheckedUpdateWithoutFavouriteInput = {
    idNewspaper?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    nameCategory?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteCreateWithoutUserInput = {
    cteatedAt?: Date | string
    updatedAt?: Date | string
    newspaper: NewspaperCreateNestedOneWithoutFavouriteInput
  }

  export type FavouriteUncheckedCreateWithoutUserInput = {
    idFavourite?: number
    idNewspaper: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteCreateOrConnectWithoutUserInput = {
    where: FavouriteWhereUniqueInput
    create: XOR<FavouriteCreateWithoutUserInput, FavouriteUncheckedCreateWithoutUserInput>
  }

  export type FavouriteCreateManyUserInputEnvelope = {
    data: Enumerable<FavouriteCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FavouriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavouriteWhereUniqueInput
    update: XOR<FavouriteUpdateWithoutUserInput, FavouriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavouriteCreateWithoutUserInput, FavouriteUncheckedCreateWithoutUserInput>
  }

  export type FavouriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavouriteWhereUniqueInput
    data: XOR<FavouriteUpdateWithoutUserInput, FavouriteUncheckedUpdateWithoutUserInput>
  }

  export type FavouriteUpdateManyWithWhereWithoutUserInput = {
    where: FavouriteScalarWhereInput
    data: XOR<FavouriteUpdateManyMutationInput, FavouriteUncheckedUpdateManyWithoutFavouritesInput>
  }

  export type FavouriteScalarWhereInput = {
    AND?: Enumerable<FavouriteScalarWhereInput>
    OR?: Enumerable<FavouriteScalarWhereInput>
    NOT?: Enumerable<FavouriteScalarWhereInput>
    idFavourite?: IntFilter | number
    idUser?: IntFilter | number
    idNewspaper?: IntFilter | number
    cteatedAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CategoryCreateWithoutNewspaperInput = {
    nameCategory: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutNewspaperInput = {
    idCategory?: number
    nameCategory: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutNewspaperInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutNewspaperInput, CategoryUncheckedCreateWithoutNewspaperInput>
  }

  export type FavouriteCreateWithoutNewspaperInput = {
    cteatedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFavouritesInput
  }

  export type FavouriteUncheckedCreateWithoutNewspaperInput = {
    idFavourite?: number
    idUser: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteCreateOrConnectWithoutNewspaperInput = {
    where: FavouriteWhereUniqueInput
    create: XOR<FavouriteCreateWithoutNewspaperInput, FavouriteUncheckedCreateWithoutNewspaperInput>
  }

  export type FavouriteCreateManyNewspaperInputEnvelope = {
    data: Enumerable<FavouriteCreateManyNewspaperInput>
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutNewspaperInput = {
    update: XOR<CategoryUpdateWithoutNewspaperInput, CategoryUncheckedUpdateWithoutNewspaperInput>
    create: XOR<CategoryCreateWithoutNewspaperInput, CategoryUncheckedCreateWithoutNewspaperInput>
  }

  export type CategoryUpdateWithoutNewspaperInput = {
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutNewspaperInput = {
    idCategory?: IntFieldUpdateOperationsInput | number
    nameCategory?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteUpsertWithWhereUniqueWithoutNewspaperInput = {
    where: FavouriteWhereUniqueInput
    update: XOR<FavouriteUpdateWithoutNewspaperInput, FavouriteUncheckedUpdateWithoutNewspaperInput>
    create: XOR<FavouriteCreateWithoutNewspaperInput, FavouriteUncheckedCreateWithoutNewspaperInput>
  }

  export type FavouriteUpdateWithWhereUniqueWithoutNewspaperInput = {
    where: FavouriteWhereUniqueInput
    data: XOR<FavouriteUpdateWithoutNewspaperInput, FavouriteUncheckedUpdateWithoutNewspaperInput>
  }

  export type FavouriteUpdateManyWithWhereWithoutNewspaperInput = {
    where: FavouriteScalarWhereInput
    data: XOR<FavouriteUpdateManyMutationInput, FavouriteUncheckedUpdateManyWithoutFavouriteInput>
  }

  export type NewspaperCreateManyCategoryInput = {
    idNewspaper?: number
    title?: string | null
    description?: string | null
    image?: string | null
    content?: string | null
    writer?: string | null
    date?: Date | string
    updatedAt?: Date | string
  }

  export type NewspaperUpdateWithoutCategoryInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Favourite?: FavouriteUpdateManyWithoutNewspaperNestedInput
  }

  export type NewspaperUncheckedUpdateWithoutCategoryInput = {
    idNewspaper?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Favourite?: FavouriteUncheckedUpdateManyWithoutNewspaperNestedInput
  }

  export type NewspaperUncheckedUpdateManyWithoutNewspaperInput = {
    idNewspaper?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    writer?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteCreateManyUserInput = {
    idFavourite?: number
    idNewspaper: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteUpdateWithoutUserInput = {
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    newspaper?: NewspaperUpdateOneRequiredWithoutFavouriteNestedInput
  }

  export type FavouriteUncheckedUpdateWithoutUserInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idNewspaper?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteUncheckedUpdateManyWithoutFavouritesInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idNewspaper?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteCreateManyNewspaperInput = {
    idFavourite?: number
    idUser: number
    cteatedAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavouriteUpdateWithoutNewspaperInput = {
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavouritesNestedInput
  }

  export type FavouriteUncheckedUpdateWithoutNewspaperInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavouriteUncheckedUpdateManyWithoutFavouriteInput = {
    idFavourite?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    cteatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}